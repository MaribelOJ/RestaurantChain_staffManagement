@page "/Employees/Form"
@page "/Employees/Form/{Cc:int}"

@using System.Security.Claims
@using UtilitiesRestaurante
@using System.Net.Http
@using System.Net.Http.Json
@using cadenaRestaurantes.AccessControllers
@using Microsoft.AspNetCore.Authorization;
@using Microsoft.AspNetCore.Components.Authorization;
@using CurrieTechnologies.Razor.SweetAlert2
@attribute [Authorize]

@inject HttpClient Http
@inject SweetAlertService notification;
@inject AuthenticationStateProvider autenticacionProvider
@inject NavigationManager NavigationManager

<h3 class="text-center">@titulo</h3>
<div class="row justify-content-center">
	<div class="col-6">
		<EditForm Model="@worker">
			<DataAnnotationsValidator></DataAnnotationsValidator>
			<div class="form-group row mb-3">
				<label class="col-sm-3">
					Cedula
				</label>
				<div>
					@if(Cc != 0)
					{
						<InputText class="form-control" @bind-Value="@worker.Cedula" readonly />
					}else{

						<InputText class="form-control" @bind-Value="@worker.Cedula"/>
					}
					<ValidationMessage For="@(() => worker.Cedula)"></ValidationMessage>

				</div>
			</div>
			<div class="form-group row mb-3">
				<label class="col-sm-3">
					Nombre Completo
				</label>
				<div>
					<InputText class="form-control" @bind-Value="@worker.Nombre" />
					<ValidationMessage For="@(() => worker.Nombre)"></ValidationMessage>
				</div>
			</div>
			<div class="form-group row mb-3">
				<label class="col-sm-3">
					Telefono
				</label>
				<div>
					<InputText class="form-control" @bind-Value="@worker.Telefono" />
					<ValidationMessage For="@(() => worker.Telefono)"></ValidationMessage>
				</div>
			</div>
			<div class="form-group row mb-3">
				<label class="col-sm-3">
					Correo
				</label>
				<div>
					<InputText class="form-control" @bind-Value="@worker.Correo" />
					<ValidationMessage For="@(() => worker.Correo)"></ValidationMessage>
				</div>
			</div>
			 <div class="form-group row mb-3">
				<label class="col-sm-3">
					Cargo
				</label>
				<AuthorizeView Roles="Administrador">
					<Authorized Context="authContext">	
						<div>
							<InputText class="form-control" @bind-Value="@worker.Cargo" />
							<ValidationMessage For="@(() => worker.Cargo)"></ValidationMessage>
						</div>
					</Authorized>
					<NotAuthorized Context="notAuthContext">
						<div>
							<InputText class="form-control" @bind-Value="@worker.Cargo" readonly />
							<ValidationMessage For="@(() => worker.Cargo)"></ValidationMessage>
						</div>
					</NotAuthorized>
				</AuthorizeView>
			</div>
			<div class="form-group row mb-3">
				<label class="col-sm-3">
					Fin Contrato
				</label>
				<div>
					<InputDate class="form-control" @bind-Value="@worker.FinContrato"></InputDate>
					<ValidationMessage For="@(() => worker.FinContrato)"></ValidationMessage>
				</div>
			</div>
			<div class="form-group row mb-3">
				<label class="col-sm-3">
					Inicio Jornada
				</label>
				<div>
					<input type="text" @bind="parsedTime" class="form-control" id="timeInput" />
					<ValidationMessage For="@(() => worker.InicioJornada)"></ValidationMessage>
				</div>
			</div>
			<div class="form-group row mb-3">
				<label class="col-sm-3">
					Nit Restaurante
				</label>
				<AuthorizeView Roles="Administrador">
					<Authorized Context="nitContext">	
						<div>
							<InputNumber class="form-control" @bind-Value="@worker.NitRestaurante" readonly />
							<ValidationMessage For="@(() => worker.NitRestaurante)"></ValidationMessage>
						</div>
					
					</Authorized>
					<NotAuthorized Context="notAuthContext">
						<div>
							<InputNumber class="form-control" @bind-Value="@worker.NitRestaurante"/>
							<ValidationMessage For="@(() => worker.NitRestaurante)"></ValidationMessage>
						</div>
					</NotAuthorized>
				</AuthorizeView>
			</div>
			<div class="form-group row mb-3">
				<div class="col-sm-12">
					<button class="btn btn-primary" @onclick="Save">
						@btnAction
					</button>
					<a href="/Employees">
						<button class="btn btn-warning">
							Volver
						</button>
					</a>
				</div>
			</div>
			
		</EditForm>
	</div>
</div>

@code {
	[Parameter]
	public int Cc  { get; set; }

	string titulo = "Registrar Empleado";
	string btnAction = "Enviar";
	string cargo = string.Empty;
	long nit = 0;
	private TimeSpan parsedTime;
	EmployeeRequest worker = new EmployeeRequest();
	RequestResponse<object> PlainOutput= new RequestResponse<object>();

	RequestResponse<EmployeeRequest> CompleteOutput = new RequestResponse<EmployeeRequest>();


	public string Url = "/api/Empleados";

	protected override async Task OnInitializedAsync()
	{
		worker.FinContrato = DateTime.Today;

		var autenticacionExt = (AuthenticationFilter)autenticacionProvider;
		var user = await autenticacionExt.GetAuthenticationStateAsync();
		var loggedUser = user.User;
		cargo = loggedUser.FindFirst(ClaimTypes.Role)?.Value;


		if (cargo == "Superadmin")
		{
			titulo = "Registrar Administrador";
			worker.Cargo = "Administrador";
			Console.WriteLine("desde el formulario");
		}
		else
		{
			nit = long.Parse(loggedUser.FindFirst(ClaimTypes.SerialNumber)?.Value);
			worker.NitRestaurante = nit;
		}

		if (Cc != 0)
		{
			CompleteOutput = await Http.GetFromJsonAsync<RequestResponse<EmployeeRequest>>($"{Url}?Cc={Cc}");
			worker = CompleteOutput.QueryData;
			parsedTime = worker.InicioJornada;

			if (cargo == "Superadmin")
			{
				titulo = "Registrar Administrador";

			}
			else
			{
				titulo = "Editar Empleado";

			}

			btnAction = "Guardar";

		}

	}


	private async Task Save()
	{
		var titulo = string.Empty;
		worker.InicioJornada = parsedTime;
		if(Cc != 0)
		{
			var updateRequest = await Http.PutAsJsonAsync<EmployeeRequest>(Url, worker);
			PlainOutput = updateRequest.Content.ReadFromJsonAsync<RequestResponse<object>>().Result;
			titulo = "Actualizar Datos";
		}
		else
		{
			worker.Estado = "Activo";
			var insertRequest = await Http.PostAsJsonAsync<EmployeeRequest>($"{Url}/{cargo}", worker);
			PlainOutput = insertRequest.Content.ReadFromJsonAsync<RequestResponse<object>>().Result;
			titulo = "Ingresar Datos";
		}

		if(PlainOutput.Success == 1)
		{
			var resultado = await notification.FireAsync(new SweetAlertOptions
			{

				Title = titulo,
				Text = "¡Los datos han sido guardados con Éxito!",
				Icon = SweetAlertIcon.Success

			});

			NavigationManager.NavigateTo("/Employees");
		}
		else
		{
			var resultado = await notification.FireAsync(new SweetAlertOptions
			{

				Title = titulo,
				Text = "¡Los datos no son validos, puede que ya existan el correo, el telefono o la cedula que esta intentando ingresar!",
				Icon = SweetAlertIcon.Error,

			});
			
		}

	}
}
