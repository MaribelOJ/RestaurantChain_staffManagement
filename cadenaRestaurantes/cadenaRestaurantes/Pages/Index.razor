@page "/Home"

@using Microsoft.AspNetCore.Authorization;
@using Microsoft.AspNetCore.Components.Authorization;

@using System.Net.Http
@using System.Net.Http.Json
@using System.Security.Claims
@using UtilitiesRestaurante
@using CurrieTechnologies.Razor.SweetAlert2
@using cadenaRestaurantes.AccessControllers

@attribute [Authorize]
@inject SweetAlertService notification;
@inject AuthenticationStateProvider autenticacionProvider
@inject SweetAlertService validation;
@inject HttpClient Http
@inject NavigationManager NavigationManager


<PageTitle>Profile</PageTitle>

<div class="container">
    <div class="form-section my-5" id="datos_institucionales">
        <div class="d-flex align-items-center justify-content-center mb-3">
            <svg xmlns="http://www.w3.org/2000/svg" width="30" height="30" fill="currentColor" class="bi bi-person-lines-fill me-2 title-icon" viewBox="0 0 16 16">
                <path d="M6 8a3 3 0 1 0 0-6 3 3 0 0 0 0 6m-5 6s-1 0-1-1 1-4 6-4 6 3 6 4-1 1-1 1zM11 3.5a.5.5 0 0 1 .5-.5h4a.5.5 0 0 1 0 1h-4a.5.5 0 0 1-.5-.5m.5 2.5a.5.5 0 0 0 0 1h4a.5.5 0 0 0 0-1zm2 3a.5.5 0 0 0 0 1h2a.5.5 0 0 0 0-1zm0 3a.5.5 0 0 0 0 1h2a.5.5 0 0 0 0-1z" />
            </svg>
            <h2>Datos Personales</h2>
        </div>
        <div class="title-line"></div>
        <EditForm Model="@user_info" class=" row justify-content-center">
			<DataAnnotationsValidator />
            
                <div class="row my-md-5 mt-5">

                    <div class="col form-group col-md-6 col-12 mb-3 mb-md-0">
                        <label for="inputCedula" class="fw-bold">Cedula:</label>        
                        <InputText class="form-control" @bind-Value="@user_info.Cedula" id="inputCedula"  readonly />
                    </div>
                    <div class="col form-group col-md-6 col-12 mb-3 mb-md-0">
                        <label for="inputName" class="fw-bold">Nombre:</label>
                        <InputText class="form-control" @bind-Value="@user_info.Nombre" id="inputNombre" />
                    </div>

                </div>

                <div class="row mb-md-5">
                    <div class="form-group col-md-6 mb-3 mb-md-0">
                            <label for="inputPhone" class="fw-bold">Telefono:</label>
                            <InputText class="form-control" @bind-Value="@user_info.Telefono" id="inputPhone" />
                        </div>
                    <div class="form-group col-md-6 mb-3 mb-md-0">
                        <label for="inputEmail" class="fw-bold"> Correo:</label>
                        <InputText class="form-control" @bind-Value="@user_info.Correo" id="inputEmail" />
                    </div>
                </div>
                <AuthorizeView Roles="Administrador">
                    <Authorized Context="authContext">
                    <div class="row mb-5">
                        <div class="form-group col-12 mb-3 mb-md-0">
                            <label for="inputEmail" class="fw-bold">Nit:</label>
                            <InputText class="form-control" @bind-Value="@user_info.Nit" id="inputNit" />
                        </div>
                    </div>
                    </Authorized>
                </AuthorizeView>
                <div class="row justify-content-center ">
                    <div class="col-md-5 col-12">
                    <button type="submit" class="btn w-100 fw-bold mb-3 mb-md-0" @onclick="Save">
                            Guardar Cambios
                        </button>
                    </div>
                    <div class="col-md-5 col-12">
                        <button type="button" class="btn w-100 fw-bold" @onclick="ShowModal">
                            Cambiar Contraseña
                        </button>
                    </div>
                </div>			
	    </EditForm>
        
    </div>
</div>

@code {

    [CascadingParameter]
    IModalService Modal { get; set; } = default!;


    public string Url = "/api/Account";

    UserRequest user_info = new UserRequest();
    RequestResponse<object>? PlainOutput = new RequestResponse<object>();

    protected override async Task OnInitializedAsync()
    {
        var autenticacionExt = (AuthenticationFilter)autenticacionProvider;
        var user = await autenticacionExt.GetAuthenticationStateAsync();
        var loggedUser = user.User;

        user_info.Cedula = loggedUser.FindFirst(ClaimTypes.NameIdentifier)?.Value ?? string.Empty;
        user_info.Nombre = loggedUser.FindFirst(ClaimTypes.Name)?.Value ?? "Desconocido";
        user_info.Telefono = loggedUser.FindFirst(ClaimTypes.HomePhone)?.Value ?? "No proporcionado";
        user_info.Correo = loggedUser.FindFirst(ClaimTypes.Email)?.Value ?? "No Registrado";
        user_info.Cargo = loggedUser.FindFirst(ClaimTypes.Role)?.Value ?? "Sin Cargo";
        user_info.Nit = loggedUser.FindFirst(ClaimTypes.SerialNumber)?.Value;
        

    }

    private async Task Save()
    {
        var updateRequest = await Http.PutAsJsonAsync<UserRequest>(Url, user_info);
        PlainOutput = updateRequest.Content.ReadFromJsonAsync<RequestResponse<object>>().Result;
      
        if (PlainOutput != null && PlainOutput.Success == 1)
        {
            var resultado = await notification.FireAsync(new SweetAlertOptions
            {

                Title = "Actualización de Datos Exitoso",
                Text = "Los datos han sido actualizados Correctamente",
                Icon = SweetAlertIcon.Success

            });
        }
        else
        {
            var resultado = await notification.FireAsync(new SweetAlertOptions
            {

                Title = "Actualización de Datos No Exitoso",
                Text = "Ningún cambio se pudo llevar a cabo",
                Icon = SweetAlertIcon.Error

            });
        }

    }


    private void ShowModal()
    {
          IModalReference modalReference;

          var cc = user_info.Cedula;

        var options = new ModalOptions
        {
                Position = ModalPosition.Middle,
                Size = ModalSize.Medium,
                HideHeader = false, 
                DisableBackgroundCancel = true,
                AnimationType = ModalAnimationType.FadeInOut
        };

		 modalReference = Modal.Show<ModalCambiarClave>(string.Empty, new ModalParameters().Add("Cedula", cc ),options);

	}

}

<style>
    .btn{
        border-radius: 4px;
        height: 44px;
        font-size: 14px;
        transition: all 200ms linear;
        border: none;
        background-color: #102770;
        color: #ffeba7;
        box-shadow: 0 8px 24px 0 rgba(16,39,112,.2);
    }

        .btn:active,
        .btn:focus {
            background-color: #ffeba7;
            color: #102770;
            box-shadow: 0 8px 24px 0 rgba(255,235,167,.2);
        }

        .btn:hover {
            background-color: #ffeba7;
            color: #102770;
            box-shadow: 0 8px 24px 0 rgba(255,235,167,.2);
        }

    .title-line {
        border-top: 2px solid #102770;
        margin-top: -10px;
    }

    .form-section {
        background-color: #f8f9fa;
        border: 1px solid #ced4da;
        padding: 20px;
        border-radius: 5px;
        max-width: 800px;
        margin: auto;
    }

        .form-section h2 {
            color: #102770;
            text-align: center;
        }

        .form-section .title-icon {
            color: #102770;
            margin-right: 10px;
            font-size: 1.5rem;
            margin-bottom: 10px;
        }

  
</style>